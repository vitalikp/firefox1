
@depends(build_project)
def notjs_project(build_project):
    return build_project != 'js'

@depends(mozconfig)
def config(mozconf):
    return {}

@depends(config)
@imports('__sandbox__')
def conf(config):
    def conf_func(name, value):
        config[name] = value
        __sandbox__.set_config_impl(name, value)
    return conf_func

def run_cmd(cmd, *args, **kwargs):
    return check_cmd_output(cmd, *args, **kwargs).rstrip()

def cmd_ver(cmd):
    return run_cmd(cmd, '--version')

@template
@imports('sys')
def check_cmd(cmd, vercmd=cmd_ver, when=always):
    @depends(when, conf)
    @imports('re')
    def check_func(when, conf):
        if not when:
            return None
        res = find_program(cmd)
        if not res:
            log.error('*** %s command not found!' % cmd)
            sys.exit(1)
        info = cmd
        if vercmd:
            ver = vercmd(res)
            if ver:
                info += ' '
                info += str(ver)

        log.info('-- Found %s: %s' % (info, res))
        
        var = cmd.replace('-', '_').upper()
        var = re.sub('[^A-Z_]', '', var)
        conf(var, res)

        return res

    return check_func

pkgconf = check_cmd('pkgconf')

@template
@imports('sys')
def check_pkg(var, pkg, minver, when=always):
    @depends_when(pkgconf, conf, when=when)
    def check_pkg_conf(pkgconf, conf):
        ver = Version(run_cmd(pkgconf, pkg, '--modversion'))
        if ver < minver:
            log.error("*** Package '%s' has version '%s', required version is '>= %s" % (pkg, ver, minver))
            sys.exit(1)
        log.info('-- Found %s %s' % (pkg, ver))

        flags = str(run_cmd(pkgconf, pkg, '--cflags'))
        log.info('    %s_CFLAGS: %s' % (var, flags))
        conf('%s_CFLAGS' % var, flags.split())

        libs = str(run_cmd(pkgconf, pkg, '--libs'))
        log.info('    %s_LIBS: %s' % (var, libs))
        conf('%s_LIBS' % var, libs.split())

        conf(var, True)

    depends(check_pkg_conf)

@imports('os')
@imports(_from='tempfile', _import='mkstemp')
def testconf(cc, name, flags, includes, source, onerror=None):
    flags = flags or []
    tn = 'testconf.%s' % name
    test = '/tmp/' + tn
    fd, path = mkstemp(prefix=tn, suffix='.c')
    
    code = ''
    for f in includes:
        code += '#include <%s>\n' % f
    code += 'int main(){ %s return 0;}' % source
    
    try:
        log.debug('Creating `%s` with content:', path)
        os.write(fd, code)
        os.close(fd)
        
        cmd = [cc.compiler]
        cmd += list(flags)
        cmd += [path, '-o', test]
        res = run_cmd(*cmd, onerror=onerror)
        res = run_cmd(test, onerror=onerror)
        os.remove(test)
        return res
    finally:
        os.remove(path)

# ICU
# ==============================================================
check_pkg('MOZ_ICU', 'icu-i18n', '58.1')

# libpng
# ==============================================================
check_pkg('LIBPNG', 'libpng', '1.6.25', when=notjs_project)

# pixman
# ==============================================================
check_pkg('MOZ_PIXMAN1', 'pixman-1', '0.19.2', when=notjs_project)

# cairo
# ==============================================================
check_pkg('MOZ_CAIRO', 'cairo', '1.10', when=notjs_project)
check_pkg('CAIRO_XRENDER', 'cairo-xlib-xrender', '1.10', when=notjs_project)

# libjpeg
# ==============================================================
check_pkg('MOZ_JPEG', 'libjpeg', '1.5.1', when=notjs_project)

# vpx
# ==============================================================
check_pkg('MOZ_VPX', 'vpx', '1.5.0', when=notjs_project)

# hunspell
# ==============================================================
check_pkg('MOZ_HUNSPELL', 'hunspell', '1.4.1', when=notjs_project)

# Graphite2
# ==============================================================
check_pkg('MOZ_GRAPHITE2', 'graphite2', '3.0.1', when=notjs_project)

# Protocol Buffers
# ==============================================================
check_pkg('MOZ_PROTOBUF', 'protobuf', '3.5.0', when=notjs_project)

# ALSA
# ==============================================================
check_pkg('MOZ_ALSA', 'alsa', '1.0', when=notjs_project)

# SoundTouch
# ==============================================================
check_pkg('MOZ_ST2', 'soundtouch', '2.0', when=notjs_project)

# FFmpeg
# ==============================================================
check_pkg('MOZ_AVUTIL', 'libavutil', '55.0', when=notjs_project)

# SQLite
# ==============================================================
@template
def sqlite_opt(name):
    @depends_when(c_compiler, config, when=notjs_project)
    @imports('sys')
    def sqlite_check(compiler, config):
        opt = 'SQLITE_%s' % name.upper()

        flags = config['MOZ_SQLITE3_CFLAGS']
        flags += config['MOZ_SQLITE3_LIBS']
        includes = ['sqlite3.h']
        src = 'if (!sqlite3_compileoption_used("%s")) return 1;' % opt

        if (testconf(compiler, name, flags, includes, src, onerror=(lambda: '1'))):
            log.error('*** System SQLite library is not compiled with %s.' % opt)
            sys.exit(1)
        log.info('    found %s option' % opt)
    depends(sqlite_check)

check_pkg('MOZ_SQLITE3', 'sqlite3', '3.17.0', when=notjs_project)
sqlite_opt('secure_delete')
sqlite_opt('threadsafe')
sqlite_opt('enable_fts3')
sqlite_opt('enable_unlock_notify')
sqlite_opt('enable_dbstat_vtab')


# NSS
# ==============================================================
nss_config = check_cmd('nss-config')

@template
@imports('sys')
def check_nss(var, minver, when=notjs_project):
    @depends_when(nss_config, conf, when=when)
    def check_nss_conf(nss_config, conf):
        ver = Version(run_cmd(nss_config, '--version'))
        if ver < minver:
            log.error("*** Package 'nss' has version '%s', required version is '>= %s" % (ver, minver))
            sys.exit(1)
        log.info('-- Found nss %s' % ver)

        flags = str(run_cmd(nss_config, '--cflags'))
        log.info('    %s_CFLAGS: %s' % (var, flags))
        conf('%s_CFLAGS' % var, flags.split())

        libs = str(run_cmd(nss_config, '--libs'))
        log.info('    %s_LIBS: %s' % (var, libs))
        conf('%s_LIBS' % var, libs.split())

        conf(var, True)
    depends(check_nss_conf)

check_nss('MOZ_NSS3', '3.28.6')

# NSPR
# ==============================================================
nspr_config = check_cmd('nspr-config')

@template
@imports('sys')
def check_nspr(var, minver, when=always):
    @depends_when(nspr_config, conf, when=when)
    def check_nspr_conf(nspr_config, conf):
        ver = Version(run_cmd(nspr_config, '--version'))
        if ver < minver:
            log.error("*** Package 'nspr' has version '%s', required version is '>= %s" % (ver, minver))
            sys.exit(1)
        log.info('-- Found nspr %s' % ver)

        flags = str(run_cmd(nspr_config, '--cflags'))
        log.info('    %s_CFLAGS: %s' % (var, flags))
        conf('%s_CFLAGS' % var, flags.split())

        libs = str(run_cmd(nspr_config, '--libs'))
        log.info('    %s_LIBS: %s' % (var, libs))
        conf('%s_LIBS' % var, libs.split())

        conf(var, True)
    depends(check_nspr_conf)

check_nspr('MOZ_NSPR4', '4.13.1')
